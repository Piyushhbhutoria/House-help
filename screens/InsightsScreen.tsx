import { SafeAreaWrapper } from '@/components/SafeAreaWrapper';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useAttendance } from '@/contexts/AttendanceContext';
import { useHouseHelp } from '@/contexts/HouseHelpContext';
import { usePayment } from '@/contexts/PaymentContext';
import { useSettings } from '@/contexts/SettingsContext';
import {
  AnalyticsData,
  calculateAnalytics,
  generateInsights,
  InsightData,
} from '@/utils/analytics';
import { formatCurrency } from '@/utils/currency';
import { borderRadius, shadows, spacing, typography } from '@/utils/spacing';
import { useTheme } from '@react-navigation/native';
import React, { useEffect, useState } from 'react';
import {
  Alert,
  RefreshControl,
  ScrollView,
  Share,
  StyleSheet
} from 'react-native';
import {
  Button,
  Icon
} from 'react-native-elements';

export const InsightsScreen: React.FC = () => {
  const theme = useTheme();
  const { houseHelps } = useHouseHelp();
  const { attendances } = useAttendance();
  const { payments } = usePayment();
  const { settings } = useSettings();

  const [insights, setInsights] = useState<InsightData[]>([]);
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadInsights();
  }, [houseHelps, attendances, payments]);

  const loadInsights = async () => {
    if (houseHelps.length === 0) {
      setInsights([]);
      setAnalyticsData(null);
      setIsLoading(false);
      return;
    }

    try {
      const generatedInsights = generateInsights(houseHelps, attendances, payments, settings);
      const analytics = calculateAnalytics(houseHelps, attendances, payments, 6);

      setInsights(generatedInsights);
      setAnalyticsData(analytics);
    } catch (error) {
      console.error('Error loading insights:', error);
      Alert.alert('Error', 'Failed to load insights data');
    } finally {
      setIsLoading(false);
    }
  };

  const onRefresh = async () => {
    setIsRefreshing(true);
    await loadInsights();
    setIsRefreshing(false);
  };

  const handleShareInsights = async () => {
    try {
      const insightsSummary = insights.map(insight =>
        `â€¢ ${insight.title}: ${insight.description}`
      ).join('\n');

      const shareContent = `ðŸ§  House Help Insights\n\n${insightsSummary}\n\nGenerated by HouseHelp Manager`;

      await Share.share({
        message: shareContent,
        title: 'House Help Insights'
      });
    } catch (error) {
      console.error('Error sharing insights:', error);
    }
  };

  const renderHeader = () => (
    <ThemedView style={styles.header}>
      <ThemedView style={styles.headerContent}>
        <ThemedView style={styles.titleSection}>
          <ThemedView style={[styles.iconContainer, { backgroundColor: theme.colors.primary }]}>
            <Icon
              name="analytics"
              type="ionicon"
              size={24}
              color="#FFFFFF"
            />
          </ThemedView>
          <ThemedText style={[styles.title, { color: theme.colors.text }]}>
            AI Insights
          </ThemedText>
          <ThemedText style={[styles.subtitle, { color: theme.colors.text }]}>
            Smart recommendations for better management
          </ThemedText>
        </ThemedView>
      </ThemedView>
    </ThemedView>
  );

  const renderSummaryCard = () => {
    if (!analyticsData) return null;

    const totalSavingsOpportunity = insights.reduce((sum, insight) => sum + (insight.savings || 0), 0);
    const highPriorityCount = insights.filter(i => i.impact === 'high').length;

    return (
      <ThemedView style={styles.summarySection}>
        <ThemedText style={[styles.sectionTitle, { color: theme.colors.text }]}>
          Overview
        </ThemedText>
        <ThemedView style={[styles.summaryCard, { backgroundColor: theme.colors.card }]}>
          <ThemedView style={styles.summaryStats}>
            <ThemedView style={styles.statItem}>
              <ThemedView style={[styles.statIcon, { backgroundColor: theme.colors.primary + '20' }]}>
                <Icon
                  name="bulb-outline"
                  type="ionicon"
                  size={16}
                  color={theme.colors.primary}
                />
              </ThemedView>
              <ThemedText style={[styles.statLabel, { color: theme.colors.text + '70' }]}>
                Total Insights
              </ThemedText>
              <ThemedText style={[styles.statNumber, { color: theme.colors.text }]}>
                {insights.length}
              </ThemedText>
            </ThemedView>
            <ThemedView style={styles.statItem}>
              <ThemedView style={[styles.statIcon, { backgroundColor: '#F44336' + '20' }]}>
                <Icon
                  name="warning-outline"
                  type="ionicon"
                  size={16}
                  color="#F44336"
                />
              </ThemedView>
              <ThemedText style={[styles.statLabel, { color: theme.colors.text + '70' }]}>
                High Priority
              </ThemedText>
              <ThemedText style={[styles.statNumber, { color: '#F44336' }]}>
                {highPriorityCount}
              </ThemedText>
            </ThemedView>
            <ThemedView style={styles.statItem}>
              <ThemedView style={[styles.statIcon, { backgroundColor: '#4CAF50' + '20' }]}>
                <Icon
                  name="trending-up-outline"
                  type="ionicon"
                  size={16}
                  color="#4CAF50"
                />
              </ThemedView>
              <ThemedText style={[styles.statLabel, { color: theme.colors.text + '70' }]}>
                Potential Savings
              </ThemedText>
              <ThemedText style={[styles.statNumber, { color: '#4CAF50' }]}>
                {formatCurrency(totalSavingsOpportunity, settings)}
              </ThemedText>
            </ThemedView>
          </ThemedView>
        </ThemedView>
      </ThemedView>
    );
  };

  const renderQuickActions = () => (
    <ThemedView style={styles.actionsSection}>
      <Button
        title="Share Insights"
        onPress={handleShareInsights}
        icon={
          <Icon
            name="share-outline"
            type="ionicon"
            size={18}
            color="#FFFFFF"
            style={{ marginRight: spacing.sm }}
          />
        }
        buttonStyle={[
          styles.shareButton,
          { backgroundColor: theme.colors.primary }
        ]}
        titleStyle={styles.shareButtonText}
        containerStyle={styles.shareButtonContainer}
      />
    </ThemedView>
  );

  const getImpactColor = (impact: string): string => {
    switch (impact) {
      case 'high': return '#F44336';
      case 'medium': return '#FF9800';
      case 'low': return '#4CAF50';
      default: return theme.colors.text;
    }
  };

  const getImpactIcon = (impact: string): string => {
    switch (impact) {
      case 'high': return 'warning-outline';
      case 'medium': return 'alert-circle-outline';
      case 'low': return 'bulb-outline';
      default: return 'information-circle-outline';
    }
  };

  const renderInsightCard = (insight: InsightData, index: number) => (
    <ThemedView
      key={index}
      style={[styles.insightCard, { backgroundColor: theme.colors.card }]}
    >
      <ThemedView style={styles.insightHeader}>
        <ThemedView style={styles.insightMeta}>
          <ThemedView style={[styles.impactBadge, { backgroundColor: getImpactColor(insight.impact) + '20' }]}>
            <Icon
              name={getImpactIcon(insight.impact)}
              type="ionicon"
              size={14}
              color={getImpactColor(insight.impact)}
            />
            <ThemedText style={[styles.impactText, { color: getImpactColor(insight.impact) }]}>
              {insight.impact.toUpperCase()}
            </ThemedText>
          </ThemedView>
          <ThemedText style={[styles.insightCategory, { color: theme.colors.text + '60' }]}>
            {insight.type}
          </ThemedText>
        </ThemedView>
      </ThemedView>

      <ThemedText style={[styles.insightTitle, { color: theme.colors.text }]}>
        {insight.title}
      </ThemedText>

      <ThemedText style={[styles.insightDescription, { color: theme.colors.text }]}>
        {insight.description}
      </ThemedText>

      {insight.recommendation && (
        <ThemedView style={[styles.recommendationsContainer, { backgroundColor: theme.colors.primary + '10' }]}>
          <ThemedView style={styles.recommendationHeader}>
            <Icon
              name="bulb-outline"
              type="ionicon"
              size={16}
              color={theme.colors.primary}
            />
            <ThemedText style={[styles.recommendationsTitle, { color: theme.colors.primary }]}>
              Recommendation
            </ThemedText>
          </ThemedView>
          <ThemedText style={[styles.recommendationItem, { color: theme.colors.text }]}>
            {insight.recommendation}
          </ThemedText>
        </ThemedView>
      )}

      {insight.savings && (
        <ThemedView style={styles.savingsContainer}>
          <ThemedView style={styles.savingsContent}>
            <Icon
              name="trending-up-outline"
              type="ionicon"
              size={16}
              color="#4CAF50"
            />
            <ThemedText style={[styles.savingsText, { color: '#4CAF50' }]}>
              Potential savings: {formatCurrency(insight.savings, settings)}
            </ThemedText>
          </ThemedView>
        </ThemedView>
      )}
    </ThemedView>
  );

  const renderInsightsByCategory = () => {
    const categories = ['high', 'medium', 'low'];

    return categories.map(category => {
      const categoryInsights = insights.filter(insight => insight.impact === category);
      if (categoryInsights.length === 0) return null;

      return (
        <ThemedView key={category} style={styles.categorySection}>
          <ThemedText style={[styles.categoryTitle, { color: getImpactColor(category) }]}>
            <Icon
              name={getImpactIcon(category)}
              type="ionicon"
              size={18}
              color={getImpactColor(category)}
            />
            {' '}{category.charAt(0).toUpperCase() + category.slice(1)} Priority
            <ThemedText style={[styles.categoryCount, { color: theme.colors.text + '60' }]}>
              {' '}({categoryInsights.length})
            </ThemedText>
          </ThemedText>
          {categoryInsights.map((insight, index) => renderInsightCard(insight, index))}
        </ThemedView>
      );
    });
  };

  const renderLoadingState = () => (
    <SafeAreaWrapper>
      <ThemedView style={styles.loadingContainer}>
        <ThemedView style={[styles.loadingIcon, { backgroundColor: theme.colors.primary + '20' }]}>
          <Icon
            name="analytics"
            type="ionicon"
            size={32}
            color={theme.colors.primary}
          />
        </ThemedView>
        <ThemedText style={[styles.loadingTitle, { color: theme.colors.text }]}>
          Analyzing your data...
        </ThemedText>
        <ThemedText style={[styles.loadingSubtext, { color: theme.colors.text + '70' }]}>
          Generating insights and recommendations
        </ThemedText>
      </ThemedView>
    </SafeAreaWrapper>
  );

  const renderEmptyState = () => (
    <SafeAreaWrapper>
      <ThemedView style={styles.emptyContainer}>
        <ThemedView style={[styles.emptyIcon, { backgroundColor: theme.colors.primary + '20' }]}>
          <Icon
            name="analytics"
            type="ionicon"
            size={32}
            color={theme.colors.primary}
          />
        </ThemedView>
        <ThemedText style={[styles.emptyTitle, { color: theme.colors.text }]}>
          No Insights Available
        </ThemedText>
        <ThemedText style={[styles.emptyMessage, { color: theme.colors.text + '70' }]}>
          Add house help workers and track attendance to get AI-powered insights and recommendations.
        </ThemedText>
      </ThemedView>
    </SafeAreaWrapper>
  );

  const renderNoIssuesState = () => (
    <SafeAreaWrapper>
      <ThemedView style={styles.emptyContainer}>
        <ThemedView style={[styles.emptyIcon, { backgroundColor: '#4CAF50' + '20' }]}>
          <Icon
            name="checkmark-circle"
            type="ionicon"
            size={32}
            color="#4CAF50"
          />
        </ThemedView>
        <ThemedText style={[styles.emptyTitle, { color: theme.colors.text }]}>
          All Good!
        </ThemedText>
        <ThemedText style={[styles.emptyMessage, { color: theme.colors.text + '70' }]}>
          No critical issues detected. Your house help management is running smoothly.
          Continue tracking to maintain optimal performance.
        </ThemedText>
        {renderQuickActions()}
      </ThemedView>
    </SafeAreaWrapper>
  );

  if (isLoading) {
    return renderLoadingState();
  }

  if (houseHelps.length === 0) {
    return renderEmptyState();
  }

  if (insights.length === 0) {
    return renderNoIssuesState();
  }

  return (
    <SafeAreaWrapper>
      <ScrollView
        style={styles.scrollContainer}
        refreshControl={<RefreshControl refreshing={isRefreshing} onRefresh={onRefresh} />}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {renderHeader()}
        {renderSummaryCard()}
        {renderQuickActions()}
        {renderInsightsByCategory()}

        <ThemedView style={styles.footer}>
          <ThemedText style={[styles.footerText, { color: theme.colors.text + '60' }]}>
            Insights updated: {new Date().toLocaleString()}
          </ThemedText>
        </ThemedView>
      </ScrollView>
    </SafeAreaWrapper>
  );
};

const styles = StyleSheet.create({
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    padding: spacing.xl,
  },
  header: {
    marginBottom: spacing.xl,
  },
  headerContent: {
    marginBottom: spacing.lg,
  },
  titleSection: {
    alignItems: 'center',
    marginBottom: spacing.lg,
  },
  iconContainer: {
    width: 64,
    height: 64,
    borderRadius: 32,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: spacing.lg,
    ...shadows.md,
  },
  title: {
    ...typography.title1,
    marginBottom: spacing.sm,
    textAlign: 'center',
  },
  subtitle: {
    ...typography.subhead,
    textAlign: 'center',
    lineHeight: 20,
    paddingHorizontal: spacing.lg,
  },
  summarySection: {
    marginBottom: spacing.xl,
  },
  sectionTitle: {
    ...typography.headline,
    fontWeight: '600',
    marginBottom: spacing.md,
  },
  summaryCard: {
    padding: spacing.lg,
    borderRadius: borderRadius.lg,
    ...shadows.sm,
  },
  summaryStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statItem: {
    alignItems: 'center',
    flex: 1,
  },
  statIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: spacing.sm,
  },
  statLabel: {
    ...typography.caption1,
    textAlign: 'center',
    marginBottom: spacing.xs,
  },
  statNumber: {
    ...typography.title2,
    fontWeight: '700',
    textAlign: 'center',
  },
  actionsSection: {
    marginBottom: spacing.xl,
  },
  shareButtonContainer: {
    width: '100%',
  },
  shareButton: {
    borderRadius: borderRadius.lg,
    paddingVertical: spacing.lg,
    ...shadows.sm,
  },
  shareButtonText: {
    color: '#FFFFFF',
    ...typography.headline,
    fontWeight: '600',
  },
  categorySection: {
    marginBottom: spacing.xl,
  },
  categoryTitle: {
    ...typography.headline,
    fontWeight: '600',
    marginBottom: spacing.md,
    flexDirection: 'row',
    alignItems: 'center',
  },
  categoryCount: {
    fontWeight: 'normal',
  },
  insightCard: {
    marginBottom: spacing.md,
    borderRadius: borderRadius.lg,
    padding: spacing.lg,
    ...shadows.sm,
  },
  insightHeader: {
    marginBottom: spacing.md,
  },
  insightMeta: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  impactBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: spacing.sm,
    paddingVertical: spacing.xs,
    borderRadius: borderRadius.md,
    gap: spacing.xs,
  },
  impactText: {
    ...typography.caption1,
    fontWeight: '600',
  },
  insightCategory: {
    ...typography.caption1,
    textTransform: 'capitalize',
  },
  insightTitle: {
    ...typography.subhead,
    fontWeight: '600',
    marginBottom: spacing.sm,
  },
  insightDescription: {
    ...typography.body,
    lineHeight: 20,
    marginBottom: spacing.md,
  },
  recommendationsContainer: {
    padding: spacing.md,
    borderRadius: borderRadius.md,
    marginBottom: spacing.md,
  },
  recommendationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.sm,
    gap: spacing.sm,
  },
  recommendationsTitle: {
    ...typography.subhead,
    fontWeight: '600',
  },
  recommendationItem: {
    ...typography.body,
    lineHeight: 20,
  },
  savingsContainer: {
    marginTop: spacing.sm,
  },
  savingsContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing.sm,
  },
  savingsText: {
    ...typography.subhead,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: spacing.xl,
  },
  loadingIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: spacing.lg,
    ...shadows.md,
  },
  loadingTitle: {
    ...typography.title2,
    marginBottom: spacing.sm,
    textAlign: 'center',
  },
  loadingSubtext: {
    ...typography.subhead,
    textAlign: 'center',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: spacing.xl,
  },
  emptyIcon: {
    width: 80,
    height: 80,
    borderRadius: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: spacing.lg,
    ...shadows.md,
  },
  emptyTitle: {
    ...typography.title2,
    marginBottom: spacing.sm,
    textAlign: 'center',
  },
  emptyMessage: {
    ...typography.body,
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: spacing.xl,
  },
  footer: {
    padding: spacing.lg,
    alignItems: 'center',
  },
  footerText: {
    ...typography.caption1,
    textAlign: 'center',
  },
}); 
